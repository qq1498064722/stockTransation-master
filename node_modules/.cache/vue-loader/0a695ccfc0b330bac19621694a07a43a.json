{"remainingRequest":"E:\\stockTransaction-master\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\stockTransaction-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\stockTransaction-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\stockTransaction-master\\src\\views\\cotent\\ActiveityStar.vue?vue&type=template&id=6aeb53a8&scoped=true&","dependencies":[{"path":"E:\\stockTransaction-master\\src\\views\\cotent\\ActiveityStar.vue","mtime":1574478025968},{"path":"E:\\stockTransaction-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\stockTransaction-master\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\stockTransaction-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\stockTransaction-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}