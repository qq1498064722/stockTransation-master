{"remainingRequest":"E:\\stockTransaction-master\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\stockTransaction-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\stockTransaction-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\stockTransaction-master\\src\\views\\cotent\\ActiveityEnd.vue?vue&type=template&id=77c3d275&scoped=true&","dependencies":[{"path":"E:\\stockTransaction-master\\src\\views\\cotent\\ActiveityEnd.vue","mtime":1574477759975},{"path":"E:\\stockTransaction-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\stockTransaction-master\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\stockTransaction-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\stockTransaction-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}